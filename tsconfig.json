{
  // TypeScript Version 4.1.3, 文档：https://www.typescriptlang.org/tsconfig
  "compilerOptions": {
    /* Visit https://aka.ms/tsconfig.json to read more about this file */

    /* --------------Basic Options-------------- */
    /**
     * 告诉TypeScript将有关上一次编译的项目图的信息保存到磁盘上存储的文件中。
     * 这将在与编译输出相同的文件夹中创建一系列.tsbuildinfo文件。您的JavaScript在运行时不会使用它们，可以安全地删除它们。
     * 默认值：如果「composite」选项为true则为true，否则为false
     */
    // "incremental": true /* Enable incremental compilation */,
    // 指定ECMAScript目标版本，"ESNext"最新的生成目标列表为：https://github.com/tc39/proposals
    "target": "es5" /* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019', 'ES2020', or 'ESNEXT'. */,
    // 指定生成哪个模块系统代码，更改「module」会影响moduleResolution
    "module": "umd" /* Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', 'es2020', or 'ESNext'. */,
    // 编译过程中需要引入的库文件的列表。相关配置及文档：https://www.typescriptlang.org/tsconfig#lib
    "lib": ["DOM", "DOM.Iterable", "ESNext"] /* Specify library files to be included in the compilation. */,
    // 允许编译javascript文件。默认值：false
    // "allowJs": true,                       /* Allow javascript files to be compiled. */
    // 在 .js文件中报告错误。与 --allowJs配合使用。默认值：false
    // "checkJs": true,                       /* Report errors in .js files. */
    /**
     * 在 .tsx文件里支持JSX，相关配置及文档：https://www.typescriptlang.org/tsconfig#jsx
     * preserve：编译输出的文件是jsx
     * react：编译输出的文件是js
     * 默认值：undefined
     */
    "jsx": "react" /* Specify JSX code generation: 'preserve', 'react-native', or 'react'. */,
    // 生成相应的 .d.ts文件。默认值：false
    // "declaration": true,                   /* Generates corresponding '.d.ts' file. */
    /**
     * 生成.d.ts文件的源映射，这些文件映射回原始.ts源文件。这将允许编辑器（如VSCode）在使用go to Definition等功能时转到原始的.ts文件。
     * 默认值：false
     */
    // "declarationMap": true,                /* Generates a sourcemap for each corresponding '.d.ts' file. */
    // 生成相应的 .map文件。默认值：false
    // "sourceMap": true /* Generates corresponding '.map' file. */,
    /**
     * 将输出文件合并为一个文件。合并的顺序是根据传入编译器的文件顺序和 ///<reference``>和 import的文件顺序决定的。
     * 只有 'amd' and 'system' modules 才支持
     */
    // "outFile": "./" /* Concatenate and emit output to single file. */,
    // 重定向输出目录。
    "outDir": "./dist" /* Redirect output structure to the directory. */,
    // 当TypeScript编译文件时，它在输出目录中保持与输入目录中相同的目录结构，文档及配置：https://www.typescriptlang.org/tsconfig#rootDir
    // "rootDir": "./" /* Specify the root directory of input files. Use to control the output directory structure with --outDir. */,
    /**
     * composite选项强制某些约束，使构建工具（包括TypeScript本身，在--build模式下）能够快速确定项目是否已经构建。
     * 会生产一个tsconfig.tsbuildinfo文件
     * 默认值：true
     */
    // "composite": true /* Enable project compilation */,
    /**
     * 此设置允许您指定一个文件，用于将增量编译信息存储为复合项目的一部分，这样可以更快地构建更大的TypeScript代码库。
     * 要配合incremental 或 composite 一起使用
     * 文档：https://www.typescriptlang.org/tsconfig#tsBuildInfoFile
     * Default:.tsbuildinfo
     */
    // "tsBuildInfoFile": "./" /* Specify file to store incremental compilation information */,
    // 删除所有注释，除了以 /!*开头的版权信息。Default:false
    "removeComments": true /* Do not emit comments to output. */,
    // 不生成输出文件。Default:false
    // "noEmit": true,                        /* Do not emit outputs. */
    /**
     * 从 tslib 导入辅助工具函数，文档及配置：https://www.typescriptlang.org/tsconfig#importHelpers
     * Default:false
     */
    // "importHelpers": true /* Import emit helpers from 'tslib'. */,
    /**
     * Downleveling是TypeScript用于传输到旧版本JavaScript的术语。此标志支持更精确地实现现代JavaScript如何在旧JavaScript运行时中迭代新概念。
     * 与「importHelpers」配合使用
     * Default:false
     */
    // "downlevelIteration": true,            /* Provide full support for iterables in 'for-of', spread, and destructuring when targeting 'ES5' or 'ES3'. */
    /**
     * 将每个文件作为单独的模块，文档及配置：https://www.typescriptlang.org/tsconfig#isolatedModules
     * 虽然可以使用TypeScript从TypeScript代码生成JavaScript代码，但使用其他transpiler（如Babel）来实现这一点也很常见。
     * 但是，其他transpiler一次只能对单个文件进行操作，这意味着它们不能应用依赖于理解完整类型系统的代码转换。
     * 这个限制也适用于TypeScript的传输模块一些构建工具使用的API。
     * Default:false
     */
    // "isolatedModules": true /* Transpile each file as a separate module (similar to 'ts.transpileModule'). */,

    /* --------------Strict Type-Checking Options（严格类型检查选项）-------------- */
    /**
     * 启用所有严格类型检查选项。
     * 相关选项：alwaysStrict, strictNullChecks, strictBindCallApply, strictFunctionTypes, strictPropertyInitialization, noImplicitAny, noImplicit
     * Default:false
     */
    "strict": true /* Enable all strict type-checking options. */,
    // 在表达式和声明上有隐含的 any类型时报错。「strict」未设置为true的时候，默认false,推荐设为true
    // "noImplicitAny": true,                 /* Raise error on expressions and declarations with an implied 'any' type. */
    /**
     * 在严格的 null检查模式下， null和 undefined值不包含在任何类型里，只允许用它们自己和 any来赋值（有个例外， undefined可以赋值到 void）。
     * 「strict」未设置为true的时候，默认false,推荐设为true
     */
    // "strictNullChecks": true,              /* Enable strict null checks. */
    /**
     * 启用时，此标志会使函数参数得到更正确的检查。
     * 「strict」未设置为true的时候，默认false,推荐设为true
     */
    // "strictFunctionTypes": true,           /* Enable strict checking of function types. */
    /**
     * 设置后，TypeScript将检查函数call、bind和apply的内置方法是否使用底层函数的正确参数调用
     * 「strict」未设置为true的时候，默认false,推荐设为true
     */
    // "strictBindCallApply": true,           /* Enable strict 'bind', 'call', and 'apply' methods on functions. */
    /**
     * 当设置为true时，TypeScript中，声明了类属性，但未在构造函数中设置，会引发错误。
     * 「strict」未设置为true的时候，默认false,推荐设为true
     */
    // "strictPropertyInitialization": true,  /* Enable strict checking of property initialization in classes. */
    /**
     * 对隐含“any”类型的“this”表达式报错
     * 「strict」未设置为true的时候，默认false,推荐设为true
     */
    // "noImplicitThis": true,                /* Raise error on 'this' expressions with an implied 'any' type. */
    /**
     * 以严格模式解析并为每个源文件生成 "use strict"语句
     * 「strict」未设置为true的时候，默认false,推荐设为true
     */
    // "alwaysStrict": true /* Parse in strict mode and emit "use strict" for each source file. */,

    /* --------------Additional Checks（附加的检查）-------------- */
    // 报告未使用的局部变量的错误。Default:false
    // "noUnusedLocals": true,                /* Report errors on unused locals. */
    // 报告函数中未使用参数的错误。Default:false
    // "noUnusedParameters": true,            /* Report errors on unused parameters. */
    // 启用时，TypeScript将检查函数中的所有代码路径，以确保它们的返回值。Default:false
    // "noImplicitReturns": true,             /* Report error when not all code paths in function return a value. */
    // 在switch语句中报告错误。确保switch语句中的任何非空大小写都包含break或return。这意味着您不会意外地发送一个case fallthrough bug。Default:false
    // "noFallthroughCasesInSwitch": true,    /* Report errors for fallthrough cases in switch statement. */
    // TypeScript有一种方法可以通过索引签名来描述具有未知键但对象上存在已知值的对象。
    // "noUncheckedIndexedAccess": true,      /* Include 'undefined' in index signature results */

    /* --------------Module Resolution Options（模块解析选项）-------------- */
    /**
     * 指定模块解析策略：node.js或“classic”（在1.6版本之前的TypeScript中使用）。您可能不需要在现代代码中使用classic。
     * 相关属性： module
     */
    // "moduleResolution": "node",            /* Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). */
    /**
     * 解析非相对模块名的基准目录。
     * 设置baseUrl来告诉编译器到哪里去查找模块。 所有非相对模块导入都会被当做相对于 baseUrl。
     */
    "baseUrl": "./" /* Base directory to resolve non-absolute module names. */,
    // 模块名到基于 baseUrl的路径映射的列表。类似于webpack的别名
    // "paths": {},                           /* A series of entries which re-map imports to lookup locations relative to the 'baseUrl'. */
    // 使用rootDirs，您可以通知编译器有许多“虚拟”目录充当单个根目录。这允许编译器解析这些“虚拟”目录中的相对模块导入，就像它们合并到一个目录中一样。
    // "rootDirs": [],                        /* List of root folders whose combined content represents the structure of the project at runtime. */
    /**
     * 要包含的类型声明文件路径列表。
     * 默认情况下，编译中包含所有可见的“@types”包。任何封闭文件夹的node_modules/@types中的包都被认为是可见的。例如，./node_modules/@types/、../node_modules/@types/、../node_modules/@types/等中的包。
     * 如果指定了typeRoots，则只包括typeRoots下的包。
     */
    // "typeRoots": [],                       /* List of folders to include type definitions from. */
    // 如果指定了类型，则只有列出的包才会包含在全局范围中。相关选项：「typeRoots」
    // "types": [],                           /* Type declaration files to be included in compilation. */
    /**
     * 允许从没有设置默认导出的模块中默认导入。这并不影响代码的输出，仅为了类型检查。
     * 必须是TypeScript 1.8之后的版本
     * 默认值：「module」为"system" 或者设置了「esModuleInterop」为true
     */
    // "allowSyntheticDefaultImports": true,  /* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */
    /**
     * 默认情况下（esModuleInterop为false或未设置），TypeScript将CommonJS/AMD/UMD模块视为与ES6模块类似的模块。在这样做的过程中，有两个部分被证明是有缺陷的
     * 1、类似import * as moment from "moment" 的命名空间导入与const moment=require("moment")的作用相同
     * 2、像import moment from "moment" 这样的默认导入与const moment=require("moment").default的作用相同
     * ES6 modules规范规定，名称空间导入（import * as x）只能是一个对象，方法是让TypeScript将其视为=require（“x”），然后TypeScript允许将导入视为函数并可调用。这违反了规范的建议。
     * 虽然符合ES6模块规范，但大多数带有CommonJS/AMD/UMD模块的库并不像TypeScript的实现那样严格。
     * 启用esModuleInterop将修复TypeScript传输的代码中的这两个问题。第一个改变了编译器中的行为，第二个由两个新的helper函数修复，它们提供了一个填充程序，以确保在发出的JavaScript中的兼容性
     */
    "esModuleInterop": true /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */,
    /**
     * 启用此选项后，对模块和包的引用（例如import和//<reference type=“…”/>指令）都是相对于符号链接文件的位置而不是相对于符号链接解析到的路径进行解析的。
     * Default:false
     */
    // "preserveSymlinks": true,              /* Do not resolve the real path of symlinks. */
    /**
     * 当设置为true时，allowumdlobalaccess允许您从模块文件内部以全局变量的形式访问UMD导出。模块文件是具有导入和/或导出的文件。如果没有此标志，则使用来自UMD模块的导出需要导入声明。
     * Default:false
     */
    // "allowUmdGlobalAccess": true,          /* Allow accessing UMD globals from modules. */

    /* --------------Source Map Options（源映射选项）-------------- */
    // 指定调试器应该定位TypeScript文件的位置，而不是相对的源位置。此字符串在源映射中逐字处理，您可以在源映射中使用路径或URL
    // "sourceRoot": "",                      /* Specify the location where debugger should locate TypeScript files instead of source locations. */
    // 指定调试器应该定位映射文件的位置，而不是生成的位置。此字符串在源映射中逐字处理，
    // "mapRoot": "",                         /* Specify the location where debugger should locate map files instead of generated locations. */
    // 默认值:false
    // "inlineSourceMap": true,               /* Emit a single file with source maps instead of having a separate file. */
    // 设置后，TypeScript将把.ts文件的原始内容作为嵌入字符串包含在源映射中。在与inlineSourceMap相同的情况下，这通常很有用。默认值:false
    // "inlineSources": true,                 /* Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set. */

    /* --------------Experimental Options（实验性的选项）-------------- */
    // 启用实验性的ES装饰器。默认值:false
    // "experimentalDecorators": true,        /* Enables experimental support for ES7 decorators. */
    // 给源码里的装饰器声明加上设计类型元数据。默认值:false
    // "emitDecoratorMetadata": true,         /* Enables experimental support for emitting type metadata for decorators. */

    /* --------------Advanced Options（高级选项）-------------- */
    // 忽略所有的声明文件（ *.d.ts）的类型检查。默认值:false
    "skipLibCheck": true /* Skip type checking of declaration files. */,
    // 设置此选项后，如果程序试图通过与磁盘上的大小写不同的大小写包含文件，TypeScript将发出错误。默认值:false，推荐true
    "forceConsistentCasingInFileNames": true /* Disallow inconsistently-cased references to the same file. */
  }
}
